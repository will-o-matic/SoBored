# Impl Hooks

## How Claude Code Uses These Patterns

```yaml
Pattern Loading:
  On Start: Load CLAUDE.mdâ†’RULES.md (core behavioral rules)
  On /persona:: Check if PERSONAS.md loadedâ†’Load if neededâ†’Cache session
  On MCP ref: Check if MCP.md loadedâ†’Load if neededâ†’Cache session
  Commands: Parse .claude/commands/*.md on /user: triggerâ†’Cache recent 5
  Shared: Include shared/*.yml when referenced by active commands

Severity Enforcement:
  CRITICAL[10]: Block op & explain why
  HIGH[7-9]: Warn user & require confirmation
  MEDIUM[4-6]: Suggest improvement & continue
  LOW[1-3]: Note in output & proceed

Auto-Triggers:
  File Open: Check extensionâ†’Load PERSONAS.md if neededâ†’Activate persona
  Command Start: Load command defâ†’Check ambiguityâ†’Clarify if needed
  MCP Usage: Load MCP.md if neededâ†’Select appropriate tool
  Risky Op: Create checkpointâ†’Log auditâ†’Validate
  Error: Activate analyzerâ†’Debug workflow
```

## Pattern Integration

```yaml
Todo Management:
  3+ steps â†’ TodoWrite() with tasks
  Status â†’ Update immediately on change
  Complete â†’ Mark done & suggest next

MCP Selection:
  Parse request â†’ Check complexity â†’ Select tool
  Simple â†’ Use native | Complex â†’ Use MCP
  Monitor tokens â†’ Switch/abort if exceeded

Context Management:
  Track % â†’ Warn at 60% â†’ Force compact at 90%
  Task complete â†’ Auto-compact context
  Project switch â†’ Clear context
```

## Command Execution

```yaml
Pre-Execution:
  1. Parse command & args
  2. Check thinking mode flags:
     - --think: Activate standard thinking mode (4K tokens)
     - --think-hard: Activate deep analysis mode (10K tokens)  
     - --ultrathink: Activate critical analysis mode (32K tokens)
     - Default: Basic mode if no thinking flag present
  3. Check MCP control flags:
     - --c7/--no-c7: Control Context7 documentation server
     - --seq/--no-seq: Control Sequential thinking server
     - --magic/--no-magic: Control Magic UI builder
     - --pup/--no-pup: Control Puppeteer browser automation
     - --all-mcp: Enable all MCP servers
     - --no-mcp: Disable all MCP servers
  4. Check risk level (shared/planning-mode.yml)
  5. If --plan flag â†’ Show plan â†’ await approval
  6. Check ambiguity (shared/ambiguity-check.yml)
  7. Research verification (shared/research-first.yml):
     - External library detected â†’ C7 resolve + get-docs REQUIRED
     - New UI component needed â†’ Magic search or WebSearch patterns
     - API integration found â†’ Official docs lookup REQUIRED
     - Unknown pattern detected â†’ Sequential analysis + research
     - Block if: No research performed for external dependencies
     - Cache: Store researched patterns for session reuse
  8. Preemptive validation:
     - Dependencies: package.json vs node_modules | Required tools installed
     - Permissions: File write access | Command availability
     - State: Clean git status for risky ops | No conflicting processes
     - Environment: Correct versions | Required env vars set
  9. Validate permissions (shared/validation.yml)
  10. Create checkpoint if risky
  11. Log start (shared/audit.yml)
  12. Documentation directory check (shared/documentation-dirs.yml):
      - Report generation? â†’ Ensure .claudedocs/[subdirs] exist
      - Project docs? â†’ Ensure /docs/[category] exists  
      - Create directories if missing with proper permissions (755)
      - Validate write permissions to target directories
  13. UltraCompressed check (shared/ultracompressed.yml):
      - --uc flag? â†’ Apply compression rules to all output
      - Context >70%? â†’ Suggest --uc mode
      - Token budget? â†’ Auto-enable compression
      - Generate legend at start of compressed docs

During:
  - Update todo status
  - Show progress indicators
  - Handle errors gracefully
  - Keep user informed

Post-Execution:
  - Log completion/failure
  - Update todos
  - If report generated â†’ Note location in output: "ðŸ“„ Report saved to: [path]"
  - If docs created â†’ Update /docs/index.md with new entries
  - Suggest next steps
  - Compact context if needed
```

## Persona Activation

```yaml
File-Based:
  *.tsx opened â†’ frontend persona active
  *.sql opened â†’ data persona active
  Dockerfile â†’ devops persona active

Keyword-Based:
  "optimize" in request â†’ performance persona
  "secure" mentioned â†’ security persona
  "refactor" â†’ refactorer persona

Context-Based:
  Error trace â†’ analyzer persona
  Architecture question â†’ architect persona
  Learning request â†’ mentor persona

Multi-Persona:
  Complex task â†’ Sequential activation
  Parallel work â†’ Concurrent personas
  Handoff â†’ Share context between
```

## Error Handling

```yaml
Pattern Detection:
  Match error â†’ Error type in patterns.yml
  Syntax â†’ Check syntax highlighting
  Runtime â†’ Validate inputs & types
  Logic â†’ Trace execution flow

Recovery:
  Try operation â†’ Catch error â†’ Check pattern
  Known â†’ Apply fix pattern
  Unknown â†’ Activate analyzer â†’ Debug
  Can't fix â†’ Explain & suggest manual fix
```

## Token Optimization

```yaml
Real-Time:
  Count tokens â†’ Apply reduction patterns
  Remove listed words â†’ Use symbols
  YAML format â†’ Compress output
  Reference > repeat â†’ Link to existing

Batch Operations:
  Group similar â†’ Single operation
  Parallel when possible â†’ Reduce time
  Cache results â†’ Avoid re-computation
```

## Unified Behaviors

```yaml
Error Format:
  All commands: [COMMAND] Error: Whatâ†’Whyâ†’Fix
  Example: [BUILD] Error: Module X failedâ†’Missing dep Yâ†’Run npm install Y

Result Format:
  Success: âœ“ Action (Xms) | Details
  Warning: âš  Issue | Impact | Suggestion  
  Failure: âœ— Error | Reason | Recovery

Command Memory:
  Store: After each command â†’ .claude/session/[command].cache
  Reuse: Check cache â†’ Use if valid â†’ Note "using prior analysis"
  Clear: On file change â†’ Invalidate related caches

## Loading Optimization
```yaml
Component Loading:
  Core: CLAUDE.md + RULES.md loaded on startup (~3500 tokens)
  Personas: Load on /persona: trigger â†’ Cache for session
  MCP: Load on MCP tool reference â†’ Cache for session
  Commands: Load on /user: trigger â†’ Cache recent 5
  
Token Savings:
  Simple tasks: 43% reduction (6100â†’3500 tokens)
  With personas: 33% reduction (6100â†’4100 tokens)
  With commands: 20-30% reduction (varies by usage)
  
Cache Strategy:
  Session-based: Keep loaded components until session ends
  LRU: Evict least recently used when memory limits reached
  Preload: Common patterns loaded proactively
```

---
*Implementation: How patterns become actions*