# MCP Server Flag Config

## MCP Control Flags
```yaml
Command_Flags:
  # Context7 Docs Server
  --c7: "Enable Context7→lib docs lookup"
  --no-c7: "Disable Context7 (native tools only)"
  
  # Sequential Thinking Server  
  --seq: "Enable Sequential thinking→complex analysis"
  --no-seq: "Disable Sequential thinking"
  
  # Magic UI Builder Server
  --magic: "Enable Magic UI component generation"
  --no-magic: "Disable Magic UI builder"
  
  # Puppeteer Browser Control Server
  --pup: "Enable Puppeteer→browser testing"
  --no-pup: "Disable Puppeteer"
  
  # Combined Controls
  --all-mcp: "Enable all MCP servers"
  --no-mcp: "Disable all MCP servers (native tools only)"
  
Usage_Examples:
  - /user:analyze --code --c7          # Use Context7 for library docs
  - /user:design --api --seq           # Use Sequential for architecture
  - /user:build --react --magic        # Use Magic for UI components
  - /user:test --e2e --pup            # Use Puppeteer for browser tests
  - /user:troubleshoot --no-mcp       # Native tools only for debugging
```

## MCP Server Capabilities
```yaml
Context7 (--c7):
  Purpose: Library documentation and code examples
  Best_for: API usage, framework patterns, library integration
  Token_cost: Low-Medium (100-2000 tokens)
  
Sequential (--seq):
  Purpose: Step-by-step complex problem solving
  Best_for: Architecture, debugging, system design
  Token_cost: Medium-High (500-10000 tokens)
  
Magic (--magic):
  Purpose: UI component generation with 21st.dev
  Best_for: React/Vue components, UI patterns
  Token_cost: Medium (500-2000 tokens)
  
Puppeteer (--pup):
  Purpose: Browser automation and testing
  Best_for: E2E tests, screenshots, web scraping
  Token_cost: Low (minimal tokens)
```

## Smart Defaults & Recommendations
```yaml
Command_Defaults:
  # Commands that benefit from specific MCP servers
  analyze + --architecture: Suggest --seq for system analysis
  build + --react: Suggest --magic for UI components
  test + --e2e: Suggest --pup for browser testing
  explain + library_name: Suggest --c7 for documentation
  design + --api: Suggest --seq --c7 for comprehensive design
  troubleshoot + --investigate: Suggest --seq for root cause analysis
  improve + --performance: Suggest --seq --pup for optimization analysis
  
Intelligent Combinations:
  --magic + --pup: Generate UI components and test them immediately
  --seq + --c7: Complex analysis with authoritative documentation
  --seq + --think-hard: Deep architectural analysis with documentation
  --c7 + --uc: Research with compressed output for token efficiency
  
Conflict_Resolution:
  --no-mcp overrides: All individual MCP flags
  Explicit beats implicit: --no-c7 overrides auto-activation
  Cost awareness: Warn if multiple high-cost MCPs selected
  Token budget: Auto-suggest --uc when approaching limits
```

## Integration with Other Flags
```yaml
Synergies:
  --think + --seq: Enhanced analysis with Sequential thinking
  --ultrathink + --all-mcp: Maximum capability for critical tasks
  --plan + --seq: Better planning with Sequential analysis
  --magic + --pup: Generate and test UI components
  
Anti-patterns:
  --no-mcp + --c7: Conflicting flags (no-mcp wins)
  Multiple costly: --seq --ultrathink (warn about token usage)
```

## Auto-Activation Override
```yaml
Flag_Priority:
  1. Explicit flags (--c7, --no-c7) → Highest priority
  2. Command defaults → Medium priority  
  3. Context triggers → Lowest priority
  
Examples:
  "React hooks" + --no-c7 → Skip Context7 despite keyword
  /user:build --react --no-magic → Skip Magic UI despite React
  /user:analyze --no-mcp → Pure native tools analysis
```

---
*MCP Flags: Explicit control over Model Context Protocol servers*